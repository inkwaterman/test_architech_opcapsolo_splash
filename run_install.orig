#!/bin/bash


###########################################################################################################
# Parameters


cd ..
ROOT_DIRECTORY=`pwd`
BASEROOT_SDK=${ROOT_DIRECTORY}
NR_CPUS=`grep -c ^processor /proc/cpuinfo`
DEFAULT_MACHINE="icorem6solo"
WGET_TIMEOUT=60

###########################################################################################################

# Installing cross-toolchain

cd ${ROOT_DIRECTORY}

MD5SDKFILE="md5sdk.txt"
MD5SDKFILELOCAL="md5sdk.local.txt"
ARCHIVESDK="sdk.tar.bz2"

MD5SDKFILE="md5sdk.txt"
MD5SDKFILELOCAL="md5sdk.local.txt"
ARCHIVESDK="sdk.tar.bz2"
SDKBIN="poky-eglibc-i686-meta-toolchain-qt5-cortexa9hf-vfp-neon-toolchain-1.6.1.sh"


wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${MD5SDKFILE} 
[ $? -eq 0 ] || { rm -f md5sdk.txt; internet_error; }

if diff ${MD5SDKFILE} ${MD5SDKFILELOCAL} >/dev/null ; then
  echo Same
  rm ${MD5SDKFILE}  
else
  wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${ARCHIVESDK}
  [ $? -eq 0 ] || { rm -f ${ARCHIVESDK}; internet_error; }
    
  tar -xvf ${ARCHIVESDK} 
  rm -rf ${ARCHIVESDK}
  rm -rf ${MD5SDKFILELOCAL}  
  ./${SDKBIN} -y -d ./sdk
  rm -rf ${SDKBIN}
  mv ${MD5SDKFILE} ${MD5SDKFILELOCAL}  
fi

###########################################################################################################
# Installing documentation

cd ${ROOT_DIRECTORY}

MD5DOCFILE="md5doc.txt"
MD5DOCFILELOCAL="md5doc.local.txt"
ARCHIVEDOC="doc.tar.bz2"


wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/Document/${MD5DOCFILE} 
[ $? -eq 0 ] || { rm -f md5doc.txt; internet_error; }

if diff ${MD5DOCFILE} ${MD5DOCFILELOCAL} >/dev/null ; then
  echo Same
  rm ${MD5DOCFILE}  
else
  wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/Document/${ARCHIVEDOC}
  [ $? -eq 0 ] || { rm -f ${ARCHIVEDOC}; internet_error; }
    
  tar -xvf ${ARCHIVEDOC} 
  rm -rf ${ARCHIVEDOC}
  rm -rf ${MD5DOCFILELOCAL}  
  mv ${MD5DOCFILE} ${MD5DOCFILELOCAL}  

fi

 

###########################################################################################################
# Yocto installation

YOCTO_DIRECTORY="yocto"

mkdir -p ${YOCTO_DIRECTORY}
cd ${YOCTO_DIRECTORY}
if [ ! -d .repo ]
then
    repo init -u https://github.com/Freescale/fsl-community-bsp-platform -b daisy
    [ $? -eq 0 ] || { rm -rf .repo; internet_error; }
fi
repo sync 

cd sources/

if [ -d "meta-engicam" ]; then
    cd meta-engicam
    git pull origin master
    cd ..
else
    git clone https://github.com/engicam-stable/meta-engicam.git
fi

if [ -d "meta-qt5" ]; then
    cd meta-qt5
    git pull origin master
    cd ..
else
    git clone https://github.com/meta-qt5/meta-qt5.git -b daisy
fi

rm -rf meta-fsl-arm/recipes-graphics/mesa
rm -rf poky/meta/recipes-graphics/mesa

cd ..

if [ -d "build_opcapsolo" ]; then
    cd build_opcapsolo
    git pull origin master
    cd ..
else
    git clone https://github.com/inkwaterman/build_opcapsolo.git
fi



###########################################################################################################
# Installing cross-toolchain

cd ${ROOT_DIRECTORY}

MD5SDKFILE="md5sdk.txt"
MD5SDKFILELOCAL="md5sdk.local.txt"
ARCHIVESDK="sdk.tar.bz2"


wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${MD5SDKFILE} 
[ $? -eq 0 ] || { rm -f md5doc.txt; internet_error; }

if diff ${MD5DOCFILE} ${MD5DOCFILELOCAL} >/dev/null ; then
  echo Same
  rm ${MD5DOCFILE}  
else
  wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${ARCHIVESDK}
  [ $? -eq 0 ] || { rm -f ${ARCHIVEDOC}; internet_error; }
    
  tar -xvf ${ARCHIVEDOC} 
  rm -rf ${ARCHIVEDOC}
  rm -rf ${MD5DOCFILELOCAL}  
  mv ${MD5DOCFILE} ${MD5DOCFILELOCAL}  

fi

# arrivato qui
exit 0


###########################################################################################################
# Installing sdk enviroment

DATE_BACKUP=`date +%d%m`

# restore backup if something goes wrong
undo_backup()
{
	if [ -f ${1}.$DATE_BACKUP.tgz ]; then 
		rm -rf ${1}
		tar -zxf ${1}.$DATE_BACKUP.tgz
	fi
}

do_backup()
{
	if [ -d ${1} ]; then 
		rm ${1}.*.tgz
		tar -zcf ${1}.$DATE_BACKUP.tgz ${1}
		rm -rf ${1}
	fi
}

install_file()
{
	echo Install $CMD
	URL=`echo $LINE | awk -F"@" '{print $2}'`
	FILE=$CMD.tgz
	do_backup $CMD
	rm -rf $CMD
	wget --timeout=${WGET_TIMEOUT} ${URL}
	[ $? -eq 0 ] || { rm -f $FILE; undo_backup $CMD; rm conf/sdk.txt; internet_error; }
	mkdir $CMD
	tar -zxf $FILE -C $CMD
	find ${CMD} -type f -exec sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" '{}' \;
	[ $? -eq 0 ] || { rm -f $FILE; undo_backup $CMD; rm conf/sdk.txt; internet_error; }
	rm -f $FILE
}

install_qt_local_libraries()
{
	echo Install $CMD
	URL=`echo $LINE | awk -F"@" '{print $2}'`
	FILE=$CMD.tgz
	wget --timeout=${WGET_TIMEOUT} ${URL}
	[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
	do_sudo "tar -zxf $FILE -C /usr/local"
    do_sudo "find /usr/local/Trolltech -type f -exec sed -i \"s|@BASEROOT_SDK@|${BASEROOT_SDK}|g\" '{}' \;"
	[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
	rm -f $FILE
}

cd $ROOT_DIRECTORY

killall eclipse
killall qtcreator

get_remote_version http://downloads.architechboards.com/microzed/sdk/dora
LOCAL_VERSION=`grep "sdk" conf/versions | awk -F":" '{print $2}'`
debecho "LOCAL_VERSION of sdk is ${LOCAL_VERSION}"

while [ ${LOCAL_VERSION} -lt ${REMOTE_VERSION} ] 
do
		((LOCAL_VERSION++))
		debecho "sdk install version: ${LOCAL_VERSION}/${REMOTE_VERSION}"

		# dowload script file to know what to do
		rm -f conf/sdk.txt
		wget --timeout=${WGET_TIMEOUT} -P conf http://downloads.architechboards.com/microzed/sdk/dora/${LOCAL_VERSION}/sdk.txt
		[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }

		while read LINE; do

			CMD=`echo "${LINE}" | awk -F"@" '{print $1}'`

			if [ -f conf/sdk.txt.old ] 
			then
				grep "${LINE}" conf/sdk.txt.old
				[ $? -eq 0 ] && { continue; }
			fi

			case  $CMD  in
						# install or upgrade java runtime
						"java")
							echo "JAVA"
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							VERSION=`echo $LINE | awk -F"@" '{print $4}'`

							if [ ! -d java/$VERSION ]
							then
								do_backup "java"
								rm -rf java
								wget --timeout=${WGET_TIMEOUT} ${URL}
								[ $? -eq 0 ] || { rm -f $FILE; undo_backup "java"; rm conf/sdk.txt; internet_error; }
								mkdir java
								tar -zxf $FILE -C java
								[ $? -eq 0 ] || { rm -f $FILE; rm -rf java; undo_backup "java"; rm conf/sdk.txt; internet_error; }
								rm -f $FILE
								mv java/$VERSION/* java/
							fi
							;;
						# install
						"eclipse")
							echo Install $CMD
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							do_backup "eclipse"
							rm -rf eclipse
							wget --timeout=${WGET_TIMEOUT} ${URL}
							[ $? -eq 0 ] || { rm -f $FILE; undo_backup "eclipse"; rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE
							[ $? -eq 0 ] || { rm -f $FILE; undo_backup "eclipse"; rm conf/sdk.txt; internet_error; }
							rm -f $FILE
							;;
						"qt-arm")
							install_qt_local_libraries
							;;
						"qt-x86")
							install_qt_local_libraries
							;;
						"qtcreator")
							install_file
							;;
						"qt-conf")
						# configure yocto plugin
							echo "QT CONF"
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							do_backup "qtcreator/conf"
							rm -f qtcreator/conf
							wget --timeout=${WGET_TIMEOUT} $URL
							[ $? -eq 0 ] || { undo_backup "qtcreator/conf"; rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE -C qtcreator/
							find qtcreator/ -type f -exec sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" '{}' \;
							rm -f $FILE
							mkdir -p ${ROOT_DIRECTORY}/workspace/qt
							;;
						"plugin")
						# install or upgrade plugin of eclipse
							echo "PLUGIN"
							REPOSITORY=`echo $LINE | awk -F"@" '{print $2}'`
							PLUGIN=`echo $LINE | awk -F"@" '{print $3}'`
							VERSION=`echo $LINE | awk -F"@" '{print $4}'`
							./eclipse/eclipse -vm java/bin -application org.eclipse.equinox.p2.director -noSplash -repository $REPOSITORY -installIUs $PLUGIN/$VERSION
							[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }
							;;
						"conf")
						# configure yocto plugin
							echo "CONF"
							PATH_CONF=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/microzed/sdk/dora/${LOCAL_VERSION}/$FILE
							[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }
							sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" $FILE
							mkdir -p $PATH_CONF > /dev/null 2>&1
							mv $FILE $PATH_CONF
							;;
						"build_workspace")
						# build or rebuild the workspace
							./eclipse/eclipse -vm java/bin -nosplash -application org.eclipse.jdt.apt.core.aptBuild -data ${ROOT_DIRECTORY}/workspace/eclipse
							mkdir -p ${ROOT_DIRECTORY}/workspace/qt
							;;
						"cmd")
						# execute a shell command from the script
							echo "CMD"
							EXECMD=`echo "${LINE}" | awk -F"@" '{print $2}'`
							${EXECMD}
							;;        
						*)
							echo "IGNORED: ${LINE}"
				  esac
		done < conf/sdk.txt

		[ -f conf/sdk.txt ] && { mv conf/sdk.txt conf/sdk.txt.old; }
		sed -i "s|sdk:$((LOCAL_VERSION-1))|sdk:${LOCAL_VERSION}|g" conf/versions
done

###########################################################################################################
# Script post-install

cd $BASEROOT_SDK
wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/microzed/script/dora/post-script.sh
[ $? -eq 0 ] || { internet_error; }
chmod 777 post-script.sh
./post-script.sh
rm post-script.sh

exit 0
